{"version":3,"sources":["Context.js","components/Header.js","components/BudgetControl.js","components/IncList.js","components/ExpList.js","components/BudgetLists.js","components/Errors.js","components/Main.js","App.js","index.js"],"names":["dataContext","createContext","Context","children","useReducer","state","action","type","payload","incList","expList","filter","item","id","dispatch","calcInc","length","reduce","prev","next","value","calcExp","useState","messages","setMessages","data","addTransaction","deleteTransaction","calcTotal","Provider","Header","useContext","className","Control","name","useRef","date","values","handleMessages","el","handleSubmit","e","success","preventDefault","current","Number","createItem","trim","some","message","onSubmit","htmlFor","ref","onChange","IncList","map","dateTime","onClick","ExpList","Lists","Errors","i","Main","App","title","meta","charset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38ebe04a.chunk.js","sourcesContent":["import React, {createContext, useReducer, useState} from 'react';\r\n\r\n\r\n  export const dataContext = createContext();\r\n\r\nexport const Context = ({children}) => {\r\n      // reducer function to handle use reduce state\r\n    const reducer = (state, action) => {\r\n        // depending on the action object type value it will update the state differently\r\n        switch(action.type) {\r\n            case 'ADD_TRANSACTION':\r\n                // check if the object payload property type is equal to inc\r\n                if (action.payload.type === \"inc\") {\r\n                // return the previous state object while modifying the incList property object by adding a new item \r\n                return {\r\n                    ...state,\r\n                    incList: [...state.incList, action.payload],\r\n                }\r\n                // check if the object payload property type is equal to exp\r\n                } else if(action.payload.type === \"exp\") {\r\n                // return the previous state object while modifying the incList property array by adding a new item \r\n                return {\r\n                    ...state,\r\n                    expList: [...state.expList, action.payload],\r\n                }\r\n            } break;\r\n            case 'DELETE_TRANSACTION':\r\n                // check if the object payload property type is equal to inc\r\n                if (action.payload.type === \"inc\") {\r\n                // return the previous state object while removing an item with an id property from the incList property array that matches the id value provided in the payload object id property\r\n                return {\r\n                    ...state,\r\n                    incList: state.incList.filter(item => item.id !== action.payload.id),\r\n                }\r\n                // check if the object payload property type is equal to exp\r\n                } else if(action.payload.type === \"exp\") {\r\n                // return the previous state object while removing an item with an id property from the expList property array that matches the id value provided in the payload object id property\r\n                return {\r\n                    ...state,\r\n                    expList: state.expList.filter(item => item.id !== action.payload.id),\r\n                }\r\n            } break;\r\n            // if nothing matches return the same state object\r\n            default: \r\n                return state\r\n            }\r\n    }\r\n\r\n  //function that activate the dispatch method so the reducer change state depending on the type value in the object passed into the dispatch method\r\n  function addTransaction(item) {\r\n    return dispatch({\r\n      type: 'ADD_TRANSACTION',\r\n      payload: item\r\n    })\r\n  }\r\n\r\n  //function that activate the dispatch method so the reducer change state depending on the type value in the object passed into the dispatch method\r\n  function deleteTransaction(item) {\r\n    return dispatch({\r\n      type: 'DELETE_TRANSACTION',\r\n      payload: item\r\n    })\r\n  }\r\n\r\n  // the initial state of the app\r\n  const initialState = {\r\n    incList: [],\r\n    expList: []\r\n  }\r\n\r\n  //using use reducer to handle the app state\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  // function to return the total inclist value, if the array is empty returns 0 instead\r\n  const calcInc = () => {\r\n    return state.incList.length === 0 \r\n    ? 0\r\n    : state.incList.reduce((prev, next) => prev + next.value, 0)\r\n  }  \r\n  // function to return the total explist value, if the array is empty returns 0 instead\r\n  const calcExp = () => {\r\n      return state.expList.length === 0 \r\n      ? 0\r\n      : state.expList.reduce((prev, next) => prev + next.value, 0)\r\n  }  \r\n  // function that returns the total (incList total - exp total)\r\n  const calcTotal = () => {\r\n      return calcInc() - calcExp()\r\n  }\r\n\r\n  // messages will contain the input errors messages\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const data = {\r\n      state,\r\n      addTransaction,\r\n      deleteTransaction,\r\n      calcInc,\r\n      calcExp,\r\n      calcTotal,\r\n      messages,\r\n      setMessages\r\n   }\r\n    return (\r\n        <dataContext.Provider value={data}>\r\n            {children}\r\n        </dataContext.Provider>\r\n    );\r\n}","import React, {useContext} from 'react';\r\nimport { dataContext } from '../Context';\r\nexport const Header = () => {\r\n    const {calcExp, calcInc, calcTotal} = useContext(dataContext);\r\n\r\n    \r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <h1>budget tracker app</h1>\r\n            \r\n                <section className=\"budget-info\">\r\n\r\n                    <p className=\"budget-info__total\">Total: <span>{calcTotal()}</span></p>\r\n                    \r\n                    <p className=\"budget-info__income-total\">Income Total: <span>{calcInc()}</span></p>\r\n                    <p className=\"budget-info__expenses-total\">Expenses Total: <span>{calcExp()}</span></p>\r\n                </section>\r\n                </div>\r\n        </header>\r\n    );\r\n}\r\n","import { useRef, useContext } from \"react\";\r\nimport { dataContext } from '../Context';\r\nexport const Control = () => {\r\n    const {state, messages, setMessages, addTransaction} = useContext(dataContext);\r\n    // using refs to get the value of input fields\r\n    let name = useRef();\r\n    let type = useRef();\r\n    let date = useRef();\r\n    let value = useRef();\r\n    let values = {\r\n        name,\r\n        date,\r\n        type,\r\n        value\r\n    }\r\n\r\n    // function to remove an error message from the messages array state\r\n    const handleMessages = (type) => {\r\n        setMessages((messages) => messages.filter(el=> el.type !== type))\r\n    }\r\n\r\n    // functon to create an item so the item be added either to the inclist or the explist\r\n    const createItem = ( state) => {\r\n        let id;\r\n        // adding an id to  the inclist or explist item depending on the type the select element value have\r\n        if (values.type.current.value === 'inc'){\r\n    \r\n          //assigning the id depending if the inclist is empty or not, if empty the id is 0, if not the id will be the last element id + 1\r\n          if (state.incList.length === 0) {\r\n            id = 0;\r\n          } else {\r\n            id = state.incList[state.incList.length - 1].id + 1;\r\n          }\r\n        } else {\r\n        //assigning the id depending if the explist is empty or not, if empty the id is 0, if not the id will be the last element id + 1\r\n          if (state.expList.length === 0) {\r\n            id = 0;\r\n          } else {\r\n            id = state.expList[state.expList.length - 1].id + 1;\r\n          }\r\n        }\r\n       \r\n        // return the item as an object\r\n        return ({\r\n          name: values.name.current.value,\r\n          date: values.date.current.value,\r\n          value: Number(values.value.current.value),\r\n          type: values.type.current.value,\r\n          id,\r\n        });\r\n    }\r\n    \r\n    // handling the submit functionality\r\n    const handleSubmit = (e) => {\r\n        // a variable to determine if there's errors in the input values or not\r\n        let success = true;\r\n        e.preventDefault();\r\n        // creating the item from input fields when the submit event is activiated\r\n        const item = createItem(state);\r\n\r\n        // check if the input fields are empty or have an invalid value and change the success variable to false\r\n        if ((item.name.trim() === '' || item.name === null)) {\r\n            success = false;\r\n            // check if the input field error message is already in the messages array state\r\n            let exist = messages.some(el => el.type === 'name');\r\n            // if the error message is not in the messages array state we add it to it \r\n            if (!exist) {\r\n                setMessages((messages) => [...messages, {type: 'name', message: 'please enter a name for the transaction'}]);\r\n            } \r\n        }\r\n        if (item.date === '') {\r\n            success = false;\r\n            let exist = messages.some(el => el.type === 'date');\r\n            if (!exist) {\r\n                setMessages((messages) => [...messages, {type: 'date', message: 'please enter a valid date for the transaction'}]);\r\n            }\r\n        } \r\n        if (item.value <= 0) {\r\n            success = false;\r\n            let exist = messages.some(el => el.type === 'value');\r\n            if (!exist) {\r\n                setMessages((messages) =>[...messages, {type: 'value', message: 'please enter a valid value for the transaction'}]);\r\n            } \r\n        } \r\n\r\n        // if there's no errors in the input fields we add the item to the inclist or explist array state with the help of the dispatch function in the addTransaction function\r\n        if (success) {\r\n            name.current.value = '';\r\n            date.current.value = '';\r\n            value.current.value = '';\r\n            return addTransaction(item);\r\n        } \r\n        return;\r\n    }\r\n    return (\r\n        <section className=\"budget-control\">\r\n        <div className=\"container\">\r\n                <form onSubmit={(e) => handleSubmit(e)}>\r\n                    <div>\r\n                        <label htmlFor=\"transaction\" >transaction name</label>\r\n                        <input ref={name} type=\"text\" id=\"transaction\" name=\"transaction\" onChange={() => handleMessages('name')}/>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"transaction-date\">transaction date</label>\r\n                        <input ref={date} type=\"date\" id=\"transaction-date\" name=\"transaction-date\" onChange={() => handleMessages('date')}/>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"transaction-type\">transaction type</label>\r\n                        <select id=\"transaction-type\" name=\"transaction-type\" ref={type}>\r\n                            <option value=\"inc\">income</option>\r\n                            <option value=\"exp\">expense</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"transaction-value\">transaction value</label>\r\n                        <input ref={value} type=\"number\" id=\"transaction-value\" name=\"transaction-name\" onChange={() => handleMessages('value')}/>\r\n                    </div>\r\n                    <button type=\"submit\">add</button>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\n","\r\nimport React, {useContext} from 'react';\r\nimport { dataContext } from '../Context';\r\n\r\nexport const IncList = () => {\r\n    const {state, deleteTransaction} = useContext(dataContext);\r\n    // render the explst items when the explist array state not empty\r\n    if (state.incList.length > 0) {\r\n        return(\r\n            <>\r\n                <ul className=\"list__inc\"  aria-label=\"income list\"> \r\n                    {state.incList.map((el) => <li key={el.id} data-id={el.id} data-type={el.type}>\r\n                        <span className=\"list__inc__name\">{el.name} </span>\r\n                        <time className=\"list__inc__date\" dateTime={`${el.date}`}>{el.date}</time>\r\n                        <span className=\"list__inc__value\">{el.value}</span>\r\n                        <button className=\"remove\" aria-label=\"remove item\" onClick={() => deleteTransaction({type: el.type, id: el.id})}>x</button>\r\n                    </li>  )}\r\n                    \r\n                </ul>\r\n            </>\r\n        );\r\n    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n","import React, {useContext} from 'react';\r\nimport { dataContext } from '../Context';\r\nexport const ExpList = () => {\r\n    const {state, deleteTransaction} = useContext(dataContext)\r\n    // render the explst items when the explist array state not empty\r\n    if (state.expList.length > 0) {\r\n        return(\r\n            <>\r\n                <ul className=\"list__exp\"  aria-label=\"expenses list\">\r\n                    {state.expList.map((el) => <li key={el.id} data-id={el.id} data-type={el.type}>\r\n                        <span className=\"list__inc__name\">{el.name} </span>\r\n                        <time className=\"list__inc__date\" dateTime={`${el.date}`}>{el.date}</time>\r\n                        <span className=\"list__inc__value\">{el.value}</span>\r\n                        <button className=\"remove\" aria-label=\"remove item\" onClick={() => deleteTransaction({type: el.type, id: el.id})}>x</button>\r\n                    </li>  )}\r\n                    \r\n                </ul>\r\n            </>\r\n        );\r\n    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n","import { IncList } from \"./IncList\";\r\nimport { ExpList } from \"./ExpList\";\r\n\r\nexport const Lists = () => {\r\n    return (\r\n        <section className=\"budget-lists\">\r\n            <div className=\"container\">\r\n                <h2>budget items</h2>\r\n                <section className=\"budget-list\">\r\n                    <IncList  />\r\n                    <ExpList  />\r\n                </section>\r\n            </div>\r\n            \r\n        </section>\r\n    );\r\n}\r\n","import React, {useContext} from 'react';\r\nimport { dataContext } from '../Context';\r\nexport const Errors = () => {\r\n    const {messages} = useContext(dataContext)\r\n    // to render the meesages inside the messages array if the array not empty\r\n    if (messages.length > 0) {\r\n        return(\r\n            <ul className=\"errors\">\r\n                {messages.map((el, i) => {\r\n                    return <li className=\"errors__message\" key={i}>{el.message}</li>\r\n                })}\r\n            </ul>\r\n        )\r\n    } else {\r\n        return null;\r\n    }\r\n}","import React, {useContext} from 'react';\r\nimport { dataContext } from '../Context';\r\nimport {Control} from \"./BudgetControl\";\r\nimport {Lists} from \"./BudgetLists\";\r\nimport {Errors} from './Errors';\r\n\r\n\r\nexport const Main = () => {\r\n    const {state, messages} = useContext(dataContext);\r\n    return (\r\n        <main>\r\n            {messages.length > 0 ? <Errors /> : null}\r\n            <Control  />\r\n            {(state.incList.length > 0 || state.expList.length > 0) ? <Lists /> : null}\r\n            \r\n        </main>\r\n    )\r\n}\r\n\r\n","import './App.css';\nimport React, {useContext} from 'react';\nimport { dataContext } from './Context';\nimport DocumentMeta from 'react-document-meta';\nimport {Header}  from './components/Header';\nimport {Main} from './components/Main';\n\n\nfunction App() {\n  // adding meta data to the app\n  const meta = {\n    title: 'Budget-App',\n    meta: {\n      charset: 'utf-8',\n    }\n  }\n\nconst {calcTotal } = useContext(dataContext)  \n  \n\n// function that assign a class depending on the total amount (incList total - exp total)\nconst handleClass = () => {\n  \n\n  // depending on the value if 0, or more than 0, or less than 0 it assign different class \n  if (calcTotal() === 0) {\n    return 'overlay overlay--neutral'\n  } else if (calcTotal() > 0) {\n    return 'overlay overlay--safe'\n  } else if (calcTotal() < 0) {\n    return 'overlay overlay--danger'\n  }\n}\n  \n  \n  return (\n    <DocumentMeta {...meta}>\n        <div className={handleClass()}></div>\n        <Header />\n        <Main    />\n    </DocumentMeta>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Context} from './Context';\nReactDOM.render(\n  <React.StrictMode>\n    <Context>\n      <App />\n    </Context>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}